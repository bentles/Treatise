\select@language {english}
\contentsline {section}{\numberline {1}Introduction}{9}
\contentsline {subsection}{\numberline {1.1}Dynamically Typed Languages}{9}
\contentsline {subsection}{\numberline {1.2}Interpreting Dynamically Typed Languages}{9}
\contentsline {subsubsection}{\numberline {1.2.1}Line by Line}{10}
\contentsline {subsubsection}{\numberline {1.2.2}Abstract Syntax Tree}{10}
\contentsline {subsubsection}{\numberline {1.2.3}Bytecode}{10}
\contentsline {subsection}{\numberline {1.3}Organisation of a Virtual Machine}{11}
\contentsline {subsubsection}{\numberline {1.3.1}Instruction Pointer}{11}
\contentsline {subsubsection}{\numberline {1.3.2}Instruction Set}{11}
\contentsline {subsubsection}{\numberline {1.3.3}Dispatch Mechanism}{11}
\contentsline {subsection}{\numberline {1.4}Project Objectives}{12}
\contentsline {subsection}{\numberline {1.5}Project Scope}{12}
\contentsline {subsection}{\numberline {1.6}Risks}{12}
\contentsline {subsection}{\numberline {1.7}Overview of Treatise}{12}
\contentsline {section}{\numberline {2}Literature Review, Existing systems and Modern Processors}{14}
\contentsline {subsection}{\numberline {2.1}Virtual Machines}{14}
\contentsline {subsection}{\numberline {2.2}The Types of Virtual Machines}{14}
\contentsline {subsection}{\numberline {2.3}The Types of Process Virtual Machines}{14}
\contentsline {subsection}{\numberline {2.4}Dynamic vs Statically Typed Programming Languages}{15}
\contentsline {subsection}{\numberline {2.5}Where Our VM is Situated}{15}
\contentsline {subsection}{\numberline {2.6}A Virtual Machine for Many Instance Applications}{15}
\contentsline {subsection}{\numberline {2.7}Type-Mapping and Argument Case Expansion}{15}
\contentsline {subsection}{\numberline {2.8}Modern Processor Architecture}{16}
\contentsline {subsubsection}{\numberline {2.8.1}Pipelining}{16}
\contentsline {subsubsection}{\numberline {2.8.2}Branch Prediction}{17}
\contentsline {subsubsection}{\numberline {2.8.3}Cache}{17}
\contentsline {subsection}{\numberline {2.9}Traditional Implementation of High Level VMs}{17}
\contentsline {subsubsection}{\numberline {2.9.1}Dispatch and Threading}{17}
\contentsline {subsubsection}{\numberline {2.9.2}Registers VS Stacks}{19}
\contentsline {subsubsection}{\numberline {2.9.3}JIT Compilation}{19}
\contentsline {subsection}{\numberline {2.10}VM Interpreter Reseach}{19}
\contentsline {subsection}{\numberline {2.11}Existing Systems}{20}
\contentsline {subsubsection}{\numberline {2.11.1}Lua VM}{20}
\contentsline {subsubsection}{\numberline {2.11.2}JRockit JVM and .NET runtime}{20}
\contentsline {section}{\numberline {3}Solution Design}{21}
\contentsline {subsection}{\numberline {3.1}Virtual Machine Design Details}{21}
\contentsline {subsection}{\numberline {3.2}Values}{21}
\contentsline {subsection}{\numberline {3.3}Objects}{22}
\contentsline {subsection}{\numberline {3.4}Buffers}{22}
\contentsline {subsection}{\numberline {3.5}Registers}{22}
\contentsline {subsection}{\numberline {3.6}Stack Frames and Function Definitions}{23}
\contentsline {subsection}{\numberline {3.7}Addressing}{23}
\contentsline {subsection}{\numberline {3.8}Instructions}{23}
\contentsline {subsubsection}{\numberline {3.8.1}Arithmetic Instructions}{25}
\contentsline {subsubsection}{\numberline {3.8.2}Bit Manipulation Instructions}{26}
\contentsline {subsubsection}{\numberline {3.8.3}Data Movement Instructions}{27}
\contentsline {subsubsection}{\numberline {3.8.4}Memory Access}{27}
\contentsline {subsubsection}{\numberline {3.8.5}Control Flow Instructions}{28}
\contentsline {subsubsection}{\numberline {3.8.6}Function Call and Return}{29}
\contentsline {subsubsection}{\numberline {3.8.7}Pragmatic Higher-Level Instructions}{30}
\contentsline {subsection}{\numberline {3.9}Conventional VM}{30}
\contentsline {subsection}{\numberline {3.10}Opcode-operand-type dispatch VM}{30}
\contentsline {subsection}{\numberline {3.11}Indirect Threading}{31}
\contentsline {subsubsection}{\numberline {3.11.1}opcode}{31}
